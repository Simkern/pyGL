# -*- coding: utf-8 -*-
"""
Created on Sat Feb
22:56:49 2024

@author: Simon
"""
import numpy as np
import matplotlib.pyplot as plt
from math import factorial

plt.close('all')

x = np.linspace(0,1,num=1000)
nmax = 14

V = np.vander(x,nmax + 1,True)
#V = np.zeros((len(x), 15))

#for i in range(15):
#    V[:,i] = np.cos(i*np.arccos(x))
#V[:,0] = x**0
#V[:,1] = x
#for i in range(0,13):
#    V[:,i+2] = 2*x*V[:,i+1] - V[:,i]

qp1 = np.array([[1.0000000000000000000e+00,  1.0668310421618504635e+00],
                [1.7271172505820169235e+00, -1.1542504579210602494e-01]])
qp2 = np.array([[1.0000000000000000000e+00,  9.9264132983041947072e-01],
                [6.6930154271087127186e-01, -1.8833350198927415815e-01],
                [5.7224957904836489341e-01,  4.2109959068982177855e-03]])
qp3 = np.array([[1.0000000000000000000e+00,  1.0007993806363356878e+00],
                [7.9829357089752213329e-01, -2.2365742718351887787e-01],
                [2.2040971161511489626e-01,  1.2499601545398984435e-02],
                [1.2485918642725863159e-01, -9.9810015898578281854e-05]])
qp4 = np.array([[1.0000000000000000000e+00,  9.9991347759304711148e-01],
                [7.5668306888329708214e-01, -2.4025402432545953884e-01],
                [2.9175397633746512345e-01,  1.8400562307678039215e-02],
                [4.5750548404322635677e-02, -4.4981502907081176448e-04],
                [1.9376829538777680730e-02,  1.6765299308108737248e-06]])
qp5 = np.array([[1.0000000000000000000e+00,  1.0000093457131530266e+00],
                [7.5017443629508826484e-01, -2.5023100706418111745e-01],
                [2.6991013134417674897e-01,  2.2480613306965212876e-02],
                [6.7668626041566587102e-02, -8.3363085734239059333e-04],
                [6.9346135560032124409e-03,  1.0779810679092561383e-05],
                [2.3446790106210413736e-03, -2.1912697469186570498e-08]])
qp6 = np.array([[1.0000000000000000000e+00,  9.9999899154562510033e-01],
                [7.4317310793725353126e-01, -2.5677508985594545088e-01],
                [2.6898234032991615456e-01,  2.5389670322537157467e-02],
                [6.1593026160813895476e-02, -1.1769059339745022305e-03],
                [1.1364907743793030262e-02,  2.4820964613817624866e-05],
                [8.2567981485296730024e-04, -1.9070014316258941354e-07],
                [2.3230231175265367241e-04,  2.3426628258627078732e-10]]) 
qp7 = np.array([[1.0000000000000000000e+00,  1.0000001087497491375e+00],
                [7.3860755265403652073e-01, -2.6139890245157325374e-01],
                [2.6609542167331571699e-01,  2.7548737236512233353e-02],
                [6.2210380540681505225e-02, -1.4675743675443654044e-03],
                [1.0229633036518400366e-02,  4.0604885270256007598e-05],
                [1.4878817819751908909e-03, -5.3705891418335754085e-07],
                [8.0883914233407339765e-05,  2.6538677816935889717e-09],
                [1.9484208914619273525e-05, -2.1189028316079702843e-12]])
qp8 = np.array([[1.0000000000000000000e+00,  9.9999998827734788367e-01],
                [7.3516490200874711006e-01, -2.6483430847822992853e-01],
                [2.6438044169339228008e-01,  2.9207044273505478870e-02],
                [6.1718734777325241574e-02, -1.7107715899069427972e-03],
                [1.0520815163731983883e-02,  5.6307821021754562350e-05],
                [1.3283453064064323585e-03, -1.0147775758029899384e-06],
                [1.5910254290684040602e-04,  9.0013440975771190466e-09],
                [6.7271456842176719503e-06, -3.0312488609110424332e-11],
                [1.4167507178008938403e-06,  1.6608075800347647028e-14]])
qp9 = np.array([[1.0000000000000000000e+00,  1.0000000012632924833e+00],
                [7.3251419564078598353e-01, -2.6748589953942883104e-01],
                [2.6303062535807977162e-01,  3.0517580603500653821e-02],
                [6.1530784916685721148e-02, -1.9147812452801917483e-03],
                [1.0492608831391450658e-02,  7.1103869037310644849e-05],
                [1.3950029476562314910e-03, -1.5678080149581536439e-06],
                [1.4116049483486023948e-04,  1.9535758505225041515e-08],
                [1.4351266620345007596e-05, -1.2209626369889029705e-10],
                [4.8597568414012272418e-07,  2.9287304416715685077e-13],
                [9.0914553514881083438e-08, -1.1485167207995354803e-16]])
qp10= np.array([[1.0000000000000000000e+00,  9.9999999986388794767e-01],
                [7.3040628740509415862e-01, -2.6959370125162598429e-01],
                [2.6198433793450755661e-01,  3.1577898264638956869e-02],
                [6.1359835762604515656e-02, -2.0872336141098597946e-03],
                [1.0522214938304485349e-02,  8.4694800522056656479e-05],
                [1.4004400136031827693e-03, -2.1529632009223805112e-06],
                [1.5162908445438365994e-04,  3.3595495648065426068e-08],
                [1.2670597578885658604e-05, -3.0243887922221152380e-10],
                [1.1179771406674077683e-06,  1.3835175675810288679e-12],
                [3.1024563729347710543e-08, -2.4479596835781524301e-15],
                [5.2207134645030587538e-09,  7.1060202430410289851e-19]])
qp11= np.array([[1.0000000000000000000e+00,  1.0000000000146631119e+00],
                [7.2869093514903338347e-01, -2.7130906619020039085e-01],
                [2.6114358806002462135e-01,  3.2452672671798064591e-02],
                [6.1230547379183840216e-02, -2.2343529914673730280e-03],
                [1.0537271208026105008e-02,  9.7033279144419487693e-05],
                [1.4150097974152344401e-03, -2.7417852073123794696e-06],
                [1.5333091232704136771e-04,  5.0236657702890298313e-08],
                [1.3934767796316549369e-05, -5.7755502193955032327e-10],
                [9.8315547981894275422e-07,  3.8862322897518799981e-12],
                [7.6575875007520006935e-08, -1.3413459199227922075e-14],
                [1.7740700295278932878e-09,  1.8010050564587997692e-17],
                [2.7127219457634251348e-10, -3.9776945578255130913e-21]])
qp12= np.array([[1.0000000000000000000e+00,  9.9999999999842054316e-01],
                [7.2726794442587404691e-01, -2.7273205541723861212e-01],
                [2.6045423235897757189e-01,  3.3186285409181041015e-02],
                [6.1125881342176750711e-02, -2.3610296684603661423e-03],
                [1.0551656317596859800e-02,  1.0818210684852625702e-04],
                [1.4248371121782907054e-03, -3.3170690870773473397e-06],
                [1.5627772051583776268e-04,  6.8564050007593925822e-08],
                [1.4198481758017543395e-05, -9.4025623763914245637e-10],
                [1.1076204551770729043e-06,  8.2159261557706839823e-12],
                [6.7122345531815556515e-08, -4.2460559325998987934e-14],
                [4.6772292551801273223e-09,  1.1335755380226379804e-16],
                [9.1859907864599662598e-11, -1.1824226782945190429e-19],
                [1.2870807304176959932e-11,  2.0328884594951322377e-23]])
qp13= np.array([[1.0000000000000000000e+00,  1.0000000000001701187e+00],
                [7.2606856648187456846e-01, -2.7393143353638373887e-01],
                [2.5987868966049413531e-01,  3.3810123496675834027e-02],
                [6.1040005208020200371e-02, -2.4710700386539540993e-03],
                [1.0563659959887015315e-02,  1.1824617529896343260e-04],
                [1.4333960951724789950e-03, -3.8691771493804491498e-06],
                [1.5836802154851644352e-04,  8.7846766808947538873e-08],
                [1.4609445035018602359e-05, -1.3766793766013695399e-09],
                [1.1372692221789108095e-06,  1.4546096489288275848e-11],
                [7.7482794810543576337e-08, -9.9041130338816606894e-14],
                [4.0886476353685167018e-09,  4.0201482804353265611e-16],
                [2.5766613699837803265e-10, -8.4753849754741511891e-19],
                [4.3455473513268560364e-12,  7.0050690177811160395e-22],
                [5.6184959576874667073e-13, -9.5581127116884329757e-26]])
qp14= np.array([[1.0000000000000000000e+00,  9.9999999999998167826e-01],
                [7.2504400105794982801e-01, -2.7495599893993723129e-01],
                [2.5939097352682523362e-01,  3.4346972429252957162e-02],
                [6.0968196803506752125e-02, -2.5674425707902795730e-03],
                [1.0574051936471402715e-02,  1.2734060684477834084e-04],
                [1.4405532019175131023e-03, -4.3932761847806353276e-06],
                [1.6019218139205361453e-04,  1.0753187241762202746e-07],
                [1.4908242237501135777e-05, -1.8710223403465319988e-09],
                [1.1820298688854366697e-06,  2.2849466635625509298e-11],
                [8.0164052804759260531e-08, -1.9038591551025381666e-13],
                [4.8361843519832766389e-09,  1.0310120249635897805e-15],
                [2.2472046467801857194e-10, -3.3490171642170337489e-18],
                [1.2922822504467751142e-11,  5.6743670690330211959e-21],
                [1.8921825619816040160e-13, -3.7794532322670955969e-24],
                [2.2710727625899900737e-14,  4.1610013267680029528e-28]]) 
qp = [ qp1, qp2, qp3, qp4, qp5, qp6, qp7, qp8, qp9, qp10, qp11, qp12, qp13, qp14 ];

fig = plt.figure(1)
for i in range(3):
    plt.plot(x,V[:,i],label=f'{i+1}')
plt.legend()
plt.show()
    
fig = plt.figure(2)

f = np.exp(-x);

for i in range(nmax):
    q = V[:,:i+2] @ qp[i][:,0]
    p = V[:,:i+2] @ qp[i][:,1]
    a = np.abs(p/q - f)
    plt.semilogy(x,a,label=f'order = {i+1}')

#plt.plot(x,f,'k--',label='f(x)')
#plt.ylim([-1, 3])
plt.legend()
plt.show()

fig = plt.figure(3)

for i in range(nmax):
    q = V[:,:i+2] @ qp[i][:,0]
    p = V[:,:i+2] @ qp[i][:,1]
    plt.plot(x,p,linestyle='--',label=f'{i+1}, p')
    plt.plot(x,q,label=f'{i+1}, q')
   
#plt.plot(x,f,'k--',label='f(x)')
#plt.ylim([-1, 3])
plt.legend()
plt.show()

fig = plt.figure(4)
plt.axhline()
plt.axvline()

for i in range(14):
    rts = np.polynomial.polynomial.polyroots(qp[i][:,0])
    plt.scatter(np.real(rts),np.imag(rts),s=140-10*i, label=f'{i+1}')
    
plt.legend()
plt.show()

# PADE
fig = plt.figure(11)

pv = np.zeros((nmax+1,))
kv = np.zeros((nmax+1,))
pv[0] = 1 
kv[0] = 1
r = nmax
m = nmax
for i in range(14):
    j = i+1
    pv[j] = (-1)*pv[j-1]*( m / ( (r + m)*j ) )
    kv[j] =      kv[j-1]*( r / ( (r + m)*j ) )
  
for i in range(14):
    p = V[:,:i+1] @ pv[:i+1]
    q = V[:,:i+1] @ kv[:i+1]
    a = np.abs(p/q - f)
    plt.semilogy(x,a,label=f'order = {i+1}/{i+1}')
plt.legend()
plt.show()    

fig = plt.figure(12)

for i in range(nmax):
    p = V[:,:i+1] @ pv[:i+1]
    q = V[:,:i+1] @ kv[:i+1]
    plt.plot(x,p,linestyle='--',label=f'{i+1}, p')
    plt.plot(x,q,label=f'{i+1}, q')
plt.legend()
plt.show()

fig = plt.figure(13)
plt.axhline()
plt.axvline()

for i in range(14):
    rts = np.polynomial.polynomial.polyroots(kv[:i+1])
    plt.scatter(np.real(rts),np.imag(rts),s=140-10*i, label=f'{i+1}')
    
plt.legend()
plt.show()

# PADE
fig = plt.figure(21)

pv = np.zeros((nmax+1,))
pv[0] = 1 
for i in range(14):
    j = i+1
    pv[j] = pv[j-1]/j
  
for i in range(14):
    p = V[:,:i+1] @ pv[:i+1]
    a = np.abs(1/p - f)
    plt.semilogy(x,a,label=f'order = {i+1}')
plt.legend()
plt.show()    

fig = plt.figure(22)
plt.axhline()
plt.axvline()

for i in range(14):
    rts = np.polynomial.polynomial.polyroots(pv[:i+1])
    plt.scatter(np.real(rts),np.imag(rts),s=140-10*i, label=f'{i+1}')
    
plt.legend()
plt.show()